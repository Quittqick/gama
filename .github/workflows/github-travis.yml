# This workflow will build a package using Maven and then publish it to GitHub packages when a release is created
# For more information see: https://github.com/actions/setup-java#apache-maven-with-a-settings-path

name: Github Travis

on:
  # Triggers the workflow on push or pull request events but only for the master branch
  push:
    branches: [ GAMA_1.8.2 ]
  schedule:
    - cron: "0 0 * * *"
  workflow_dispatch:  # For manual trigger

jobs:
  # 
  # GENERIC BUILD
  # 
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
      
      - name: Set up Adopt OpenJDK 17
        uses: actions/setup-java@v2 
        with:
          distribution: 'temurin'
          java-version: '17'
          java-package: jdk

      - name: Prepare build
        run: |
          echo "MAVEN_OPTS='-Dorg.slf4j.simpleLogger.defaultLogLevel=error -XX:+TieredCompilation -XX:TieredStopAtLevel=1 -Xmx2048m'" >> ~/.mavenrc
          sudo chmod +x $GITHUB_WORKSPACE/travis/*.sh
      
      - name: Build with Maven
        shell: bash
        run: $GITHUB_WORKSPACE/travis/compile.sh 
        env:
          MSG: ${ github.event.head_commit.message }
          
      - name: Validate and test Maven
        shell: bash
        run: $GITHUB_WORKSPACE/travis/validate_and_test.sh
        env:
          MSG: ${ github.event.head_commit.message }

      - name: Check if should release version
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" || '::escapeData::${{ github.event.head_commit.message }}' == *"ci release"* ]]; then
             echo "The action will continue and create a release"
             echo "CONTINUE=true" >> $GITHUB_ENV
          else
             echo "The action will nicely stop now"
             echo "CONTINUE=false" >> $GITHUB_ENV             
          	./travis/ci-gateway.sh
          fi
          echo ${{ env.CONTINUE }}
        env:  
          SSH_USER_PWD: ${{ secrets.USER_PWD }}
          SSH_HOST: ${{ secrets.SSH_HOST }}
          MSG: ${{ env.TRAVIS_MSG }}
          GITHUB_TOKEN: ${{ github.token }}
          SSHPASS: ${{ secrets.USER_PWD }}
          BOT_TOKEN: ${{ secrets.BOT_TOKEN }}
          TRAVIS_COMMIT: ${ GITHUB_SHA }
          TRAVIS_EVENT_TYPE: ${{ github.event_name }}
          thePATH: "${{ github.workspace }}/Gama1.7"
          
      - name: Make zip file
        if: env.CONTINUE == 'true'
        shell: bash
        run: $GITHUB_WORKSPACE/travis/zip_withjdk.sh
        env:
          MSG: ${ github.event.head_commit.message }

      # cf https://github.com/actions/upload-artifact/issues/246
      - name: Move artefacts to root tree
        if: env.CONTINUE == 'true'
        run: |
          # MacOS Family
          mv ${{ github.workspace }}/ummisco.gama.product/target/products/Gama*zip ${{ github.workspace }}
          mv ${{ github.workspace }}/travis/mac-sign.sh ${{ github.workspace }}
          mv ${{ github.workspace }}/travis/what2sign.sh ${{ github.workspace }}
          mv ${{ github.workspace }}/ummisco.gama.product/extraresources/installer/windows/* ${{ github.workspace }}
          # Debian Family
          mv Gama1.7-linux.gtk.x86_64.zip gama-platform_1.8.2-1_amd64.zip
          mv Gama1.7-linux.gtk.x86_64_withJDK.zip gama-platform-jdk_1.8.2-1_amd64.zip
          cd ${{ github.workspace }}/ummisco.gama.product/extraresources/installer/unix && zip -r ${{ github.workspace }}/extraresources-unix.zip . && cd -

      - uses: actions/upload-artifact@v2
        if: env.CONTINUE == 'true'
        with:
          name: gama-mac-unsigned
          path: |
            ./Gama1.7-macosx*zip
            ./mac-sign.sh
            ./what2sign.sh

      - uses: actions/upload-artifact@v2
        if: env.CONTINUE == 'true'
        with:
          name: gama-linux-jdk
          path: |
            ./gama-platform*amd64.zip
            ./extraresources-unix.zip
      
      - uses: actions/upload-artifact@v2
        if: env.CONTINUE == 'true'
        with:
          name: gama-windows
          path: |
            ./Gama1.7-win32*zip
            ./icon256.ico
            ./windows_installer_script.iss
            ./LICENSE

      - uses: actions/upload-artifact@v2
        if: env.CONTINUE == 'true'
        with:
          name: gama-zip-builds
          path: |
            ./Gama1.7-win32*zip
            ./gama-platform*amd64.zip
          
    outputs:
      continue_pipeline: ${{ env.CONTINUE }}
  
  #
  # MacOS signature Pipelines
  #
  macOS-pre-signing:
    needs: build
    if: needs.build.outputs.continue_pipeline == 'true'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/download-artifact@v2
        with:
          name: gama-mac-unsigned

      - name: Calculate what Jar to sign
        run: |
          bash what2sign.sh
          echo "\nPrint `needToSign.txt` :"
          cat needToSign.txt

      - uses: actions/upload-artifact@v2
        with:
          name: gama-mac-what2sign
          path: |
            ./needToSign.txt

  macOS-signing:
    needs: macOS-pre-signing
    runs-on: macos-latest    
    strategy:
      matrix:
        zipName: [Gama1.7-macosx.cocoa.x86_64, Gama1.7-macosx.cocoa.x86_64_withJDK, Gama1.7-macosx.cocoa.aarch64, Gama1.7-macosx.cocoa.aarch64_withJDK]
    steps:
      - uses: actions/checkout@v2

      - name: Prepare vm
        shell: bash
        run: |
          # Change XCode version 
          export JAVA_HOME=$JAVA_HOME_17_X64
          mkdir -p ${{ github.workspace }}/artifacts/work

      - uses: actions/download-artifact@v2
        with:
          name: gama-mac-what2sign

      - uses: actions/download-artifact@v2
        with:
          name: gama-mac-unsigned
          path: ./artifacts/

      - name: Create Keychain
        shell: bash
        env: 
          MACOS_CERTIFICATE: ${{ secrets.MACOS_CERTIFICATE }}
          MACOS_CERTIFICATE_PWD: ${{ secrets.MACOS_CERTIFICATE_PWD }}
          MACOS_KEYCHAIN_PWD: ${{ secrets.MACOS_KEYCHAIN_PWD }}
        run: |
          # Prepare the keychain - Based on https://localazy.com/blog/how-to-automatically-sign-macos-apps-using-github-actions
          security create-keychain -p "$MACOS_KEYCHAIN_PWD" build.keychain
          security default-keychain -s build.keychain
          security unlock-keychain -p "$MACOS_KEYCHAIN_PWD" build.keychain
          # Prepare certificate
          echo "$MACOS_CERTIFICATE" | base64 --decode > certificate.p12
          security import certificate.p12 -k build.keychain -P "$MACOS_CERTIFICATE_PWD" -T /usr/bin/codesign
          security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k "$MACOS_KEYCHAIN_PWD" build.keychain

      - name: Sign Application
        shell: bash
        env: 
          working_directory: ${{ github.workspace }}/artifacts/work
          # Variables
          MACOS_DEV_ID: ${{ secrets.MACOS_DEV_ID }}
          MACOS_KEYCHAIN_PWD: ${{ secrets.MACOS_KEYCHAIN_PWD }}
          IS_WITH_JDK: ${{ secrets.IS_WITH_JDK }}
        run: |
          # Unlock
          security unlock-keychain -p "$MACOS_KEYCHAIN_PWD" build.keychain
          unzip -q ${{ github.workspace }}/artifacts/${{ matrix.zipName }}.zip -d . && rm ${{ github.workspace }}/artifacts/*.zip
          # Sign everything inside app
          bash ${{ github.workspace }}/artifacts/mac-sign.sh
          wget https://raw.githubusercontent.com/gama-platform/gama/$( echo $GITHUB_SHA )/ummisco.gama.product/extraresources/entitlements.plist && plutil -convert xml1 ./entitlements.plist && plutil -lint ./entitlements.plist
          codesign --entitlements "./entitlements.plist" --timestamp --options=runtime --force -s "$MACOS_DEV_ID" -v ./Gama.app/Contents/MacOS/Gama

      - name: Packaging signed Application w/o JDK
        shell: bash
        env: 
          working_directory: ${{ github.workspace }}/artifacts/work
          # Variables
          MACOS_DEV_ID: ${{ secrets.MACOS_DEV_ID }}
          MACOS_KEYCHAIN_PWD: ${{ secrets.MACOS_KEYCHAIN_PWD }}
          # Notarization variables
          NOTARY_APPLE_ID: ${{ secrets.NOTARY_APPLE_ID }}
          NOTARY_PASSWORD: ${{ secrets.NOTARY_PASSWORD }}
          NOTARY_TEAM_ID: ${{ secrets.NOTARY_TEAM_ID }}
        run: |
          # Unlock
          security unlock-keychain -p "$MACOS_KEYCHAIN_PWD" build.keychain
          # Make DMG - Based on : https://developer.apple.com/forums/thread/128166
          hdiutil create -verbose -srcFolder ./Gama.app -o ./${{ matrix.zipName }}.dmg
          codesign -s "$MACOS_DEV_ID" --timestamp -f -v ./${{ matrix.zipName }}.dmg
          # Notarize dmg - Based on : https://developer.apple.com/documentation/security/notarizing_macos_software_before_distribution/customizing_the_notarization_workflow#3087734
          xcrun -v notarytool store-credentials "AC_PASSWORD" --apple-id "$NOTARY_APPLE_ID" --team-id "$NOTARY_TEAM_ID" --password "$NOTARY_PASSWORD"
          xcrun -v notarytool submit ./${{ matrix.zipName }}.dmg --keychain-profile "AC_PASSWORD" --wait
          xcrun -v stapler staple ./${{ matrix.zipName }}.dmg

      - uses: actions/upload-artifact@v3
        env: 
          working_directory: ${{ github.workspace }}/artifacts/work
        with:
          name: gama-mac-signed
          path: ./${{ matrix.zipName }}.dmg
          if-no-files-found: error # 'warn' or 'ignore' are also available, defaults to `warn` 

  #
  # Linux packaging Pipelines
  #
  debian-archive:
    # https://earthly.dev/blog/creating-and-hosting-your-own-deb-packages-and-apt-repo/#step-1-creating-a-deb-package
    needs: build
    if: needs.build.outputs.continue_pipeline == 'true'
    runs-on: ubuntu-latest
    strategy:
      matrix:
        zipName: [gama-platform_1.8.2-1_amd64, gama-platform-jdk_1.8.2-1_amd64]
    steps:
      - name: Prepare vm
        run: |
          sudo apt-get install -y gcc dpkg-dev gpg
          mkdir -p ${{ github.workspace }}/${{ matrix.zipName }}/DEBIAN ${{ github.workspace }}/${{ matrix.zipName }}/opt/gama-platform ${{ github.workspace }}/${{ matrix.zipName }}/usr/share/applications

      - uses: actions/download-artifact@v2
        with:
          name: gama-linux-jdk
          path: ${{ github.workspace }}/${{ matrix.zipName }}/opt/gama-platform

      - name: Get extra files
        run: |
          unzip ${{ github.workspace }}/${{ matrix.zipName }}/opt/gama-platform/extraresources-unix.zip -d ${{ github.workspace }}/${{ matrix.zipName }} && rm ${{ github.workspace }}/${{ matrix.zipName }}/opt/gama-platform/extraresources-unix.zip
          mv ${{ github.workspace }}/${{ matrix.zipName }}/gama-platform.desktop ${{ github.workspace }}/${{ matrix.zipName }}/usr/share/applications/gama-platform.desktop
          cd ${{ github.workspace }}/${{ matrix.zipName }}/opt/gama-platform && unzip ${{ matrix.zipName }}.zip && cd -
          rm ${{ github.workspace }}/${{ matrix.zipName }}/opt/gama-platform/*.zip

      - name: Tweaks for package w/ JDK
        if: contains(matrix.zipName, 'jdk')
        run: |
          sed -i "s/gama-platform-jdk$/gama-platform/g" ${{ github.workspace }}/${{ matrix.zipName }}/DEBIAN/control
          sed -i "s/Package: gama-platform$/Package: gama-platform-jdk/g" ${{ github.workspace }}/${{ matrix.zipName }}/DEBIAN/control
          sed -i "/^Depends:.*$/d" ${{ github.workspace }}/${{ matrix.zipName }}/DEBIAN/control
          # Pre-fix relative path for headless helper script (jdk path)
          sed -i "s/\".*\.\/j/\/opt\/gama-platform\/j/g" ${{ github.workspace }}/${{ matrix.zipName }}/opt/gama-platform/headless/gama-headless.sh

      - name: Fix relative path for headless helper script (plugin path)
        run: sed -i "s/\".*\.\/p/\/opt\/gama-platform\/p/g" ${{ github.workspace }}/${{ matrix.zipName }}/opt/gama-platform/headless/gama-headless.sh

      - name: Build DEB archive
        run: |
          dpkg --build ${{ github.workspace }}/${{ matrix.zipName }}
          dpkg --info ${{ github.workspace }}/${{ matrix.zipName }}.deb

      - uses: actions/upload-artifact@v3
        with:
          name: gama-linux-deb
          path: |
            ${{ github.workspace }}/${{ matrix.zipName }}.deb
  debian-test-installer:
    # https://earthly.dev/blog/creating-and-hosting-your-own-deb-packages-and-apt-repo/#step-1-creating-a-deb-package
    needs: debian-archive
    runs-on: ubuntu-latest
    steps:
      # Get Linux deb archive
      - uses: actions/download-artifact@v2
        with:
          name: gama-linux-deb

      - name: Update apt databse
        run: |
          sudo apt update

      - name: Install, Run & Remove (w JDK)
        shell: bash
        run: |
          sudo apt install ./gama-platform-jdk_1.8.2-1_amd64.deb
          gama-headless -help

      - name: Install, Run & Remove (w/o JDK)
        shell: bash
        run: |
          sudo apt install -y ./gama-platform_1.8.2-1_amd64.deb
          # Switch to OpenJDK 17
          sudo update-java-alternatives -s $(update-java-alternatives -l | grep "\-openjdk" | cut -d " " -f 1)
          java -version
          gama-headless -help
          sudo apt remove -y gama-platform
  
  #
  # Windows packaging Pipelines
  #
  windows-msi:
    needs: build
    if: needs.build.outputs.continue_pipeline == 'true'
    runs-on: windows-latest
    strategy:
      matrix:
        zipName: [Gama1.7-win32.win32.x86_64.zip, Gama1.7-win32.win32.x86_64_withJDK.zip]
    steps:
      - uses: actions/download-artifact@v2
        with:
          name: gama-windows

      - name: Change variables for JDK installer
        if: contains( matrix.zipName, 'withJDK')
        run: |
          ((Get-Content -path windows_installer_script.iss -Raw) -replace 'x86_64','x86_64_withJDK') | Set-Content -Path windows_installer_script.iss
          Get-Content -path windows_installer_script.iss

      - name: Prepare vm
        run: |
          mkdir gama_output
          mkdir gama_input
          7z x ${{ matrix.zipName }} -ogama_input

      - name: Create installer
        run: iscc.exe windows_installer_script.iss

      - uses: actions/upload-artifact@v3
        with:
          name: gama-windows-exe
          path: |
            gama_output

  # TODO
  #windows-wget-push:
  #

  
  #
  # Github releasing
  #
  publish-archives:
    needs: [macOS-signing, debian-test-installer, windows-msi]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      # Get zip archives
      - uses: actions/download-artifact@v2
        with:
          name: gama-zip-builds

      # Get Mac dmg signed archives
      - uses: actions/download-artifact@v2
        with:
          name: gama-mac-signed

      # Get Linux deb archive
      - uses: actions/download-artifact@v2
        with:
          name: gama-linux-deb

      # Get Linux deb archive
      - uses: actions/download-artifact@v2
        with:
          name: gama-windows-exe

      - name: Set Travis env
        run: |
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            echo "[WARNING] Forcing travis version release"
            echo "TRAVIS_MSG=ci release" >> $GITHUB_ENV
          else
            echo "TRAVIS_MSG=$(echo $github.event.head_commit.message )" >> $GITHUB_ENV
          fi
          echo $TRAVIS_MSG

      - name: Get travis scripts ready to use
        run: |
          # Get full travis script folder
          chmod +x ./travis/*
          # Debug
          ls -lah ${{ github.workspace }}


      - name: Publish to Github
        run: ./travis/publish.sh
        env:  
          SSH_USER_PWD: ${{ secrets.USER_PWD }}
          SSH_HOST: ${{ secrets.SSH_HOST }}
          MSG: ${{ env.TRAVIS_MSG }}
          GITHUB_TOKEN: ${{ github.token }}
          SSHPASS: ${{ secrets.USER_PWD }}
          BOT_TOKEN: ${{ secrets.BOT_TOKEN }}
          TRAVIS_COMMIT: ${ GITHUB_SHA }
          TRAVIS_EVENT_TYPE: ${{ github.event_name }}
          thePATH: "${{ github.workspace }}/Gama1.7"
          GITHUB_WORKSPACE: ${{ github.workspace }}
